{"version":3,"sources":["binding_record.js"],"names":[],"mappings":"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","file":"src/change_detection/binding_record.js","sourceRoot":"/Users/peteringram/Code/Angular2-Plate/node_modules/angular2/es6/dev/","sourcesContent":["import {assert} from \"rtts_assert/rtts_assert\";\nimport {isPresent,\n  isBlank} from 'angular2/src/facade/lang';\nimport {SetterFn} from 'angular2/src/reflection/types';\nimport {AST} from './parser/ast';\nimport {DirectiveIndex,\n  DirectiveRecord} from './directive_record';\nconst DIRECTIVE = \"directive\";\nconst ELEMENT = \"element\";\nconst TEXT_NODE = \"textNode\";\nexport class BindingRecord {\n  constructor(mode, implicitReceiver, ast, elementIndex, propertyName, setter, directiveRecord) {\n    assert.argumentTypes(mode, assert.type.string, implicitReceiver, assert.type.any, ast, AST, elementIndex, assert.type.number, propertyName, assert.type.string, setter, SetterFn, directiveRecord, DirectiveRecord);\n    this.mode = mode;\n    this.implicitReceiver = implicitReceiver;\n    this.ast = ast;\n    this.elementIndex = elementIndex;\n    this.propertyName = propertyName;\n    this.setter = setter;\n    this.directiveRecord = directiveRecord;\n  }\n  callOnChange() {\n    return isPresent(this.directiveRecord) && this.directiveRecord.callOnChange;\n  }\n  isOnPushChangeDetection() {\n    return isPresent(this.directiveRecord) && this.directiveRecord.isOnPushChangeDetection();\n  }\n  isDirective() {\n    return this.mode === DIRECTIVE;\n  }\n  isElement() {\n    return this.mode === ELEMENT;\n  }\n  isTextNode() {\n    return this.mode === TEXT_NODE;\n  }\n  static createForDirective(ast, propertyName, setter, directiveRecord) {\n    assert.argumentTypes(ast, AST, propertyName, assert.type.string, setter, SetterFn, directiveRecord, DirectiveRecord);\n    return new BindingRecord(DIRECTIVE, 0, ast, 0, propertyName, setter, directiveRecord);\n  }\n  static createForElement(ast, elementIndex, propertyName) {\n    assert.argumentTypes(ast, AST, elementIndex, assert.type.number, propertyName, assert.type.string);\n    return new BindingRecord(ELEMENT, 0, ast, elementIndex, propertyName, null, null);\n  }\n  static createForHostProperty(directiveIndex, ast, propertyName) {\n    assert.argumentTypes(directiveIndex, DirectiveIndex, ast, AST, propertyName, assert.type.string);\n    return new BindingRecord(ELEMENT, directiveIndex, ast, directiveIndex.elementIndex, propertyName, null, null);\n  }\n  static createForTextNode(ast, elementIndex) {\n    assert.argumentTypes(ast, AST, elementIndex, assert.type.number);\n    return new BindingRecord(TEXT_NODE, 0, ast, elementIndex, null, null, null);\n  }\n}\nObject.defineProperty(BindingRecord, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.any], [AST], [assert.type.number], [assert.type.string], [SetterFn], [DirectiveRecord]];\n  }});\nObject.defineProperty(BindingRecord.createForDirective, \"parameters\", {get: function() {\n    return [[AST], [assert.type.string], [SetterFn], [DirectiveRecord]];\n  }});\nObject.defineProperty(BindingRecord.createForElement, \"parameters\", {get: function() {\n    return [[AST], [assert.type.number], [assert.type.string]];\n  }});\nObject.defineProperty(BindingRecord.createForHostProperty, \"parameters\", {get: function() {\n    return [[DirectiveIndex], [AST], [assert.type.string]];\n  }});\nObject.defineProperty(BindingRecord.createForTextNode, \"parameters\", {get: function() {\n    return [[AST], [assert.type.number]];\n  }});\n//# sourceMappingURL=binding_record.js.map\n\n//# sourceMappingURL=./binding_record.map"]}