{"version":3,"sources":["lexer.js"],"names":[],"mappings":"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","file":"src/change_detection/parser/lexer.js","sourceRoot":"/Users/peteringram/Code/Angular2-Plate/node_modules/angular2/es6/dev/","sourcesContent":["import {assert} from \"rtts_assert/rtts_assert\";\nimport {Injectable} from 'angular2/di';\nimport {List,\n  ListWrapper,\n  SetWrapper} from \"angular2/src/facade/collection\";\nimport {int,\n  NumberWrapper,\n  StringJoiner,\n  StringWrapper} from \"angular2/src/facade/lang\";\nexport const TOKEN_TYPE_CHARACTER = 1;\nexport const TOKEN_TYPE_IDENTIFIER = 2;\nexport const TOKEN_TYPE_KEYWORD = 3;\nexport const TOKEN_TYPE_STRING = 4;\nexport const TOKEN_TYPE_OPERATOR = 5;\nexport const TOKEN_TYPE_NUMBER = 6;\nexport class Lexer {\n  tokenize(text) {\n    assert.argumentTypes(text, assert.type.string);\n    var scanner = new _Scanner(text);\n    var tokens = [];\n    var token = scanner.scanToken();\n    while (token != null) {\n      ListWrapper.push(tokens, token);\n      token = scanner.scanToken();\n    }\n    return assert.returnType((tokens), List);\n  }\n}\nObject.defineProperty(Lexer, \"annotations\", {get: function() {\n    return [new Injectable()];\n  }});\nObject.defineProperty(Lexer.prototype.tokenize, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nexport class Token {\n  constructor(index, type, numValue, strValue) {\n    assert.argumentTypes(index, int, type, int, numValue, assert.type.number, strValue, assert.type.string);\n    this.index = index;\n    this.type = type;\n    this._numValue = numValue;\n    this._strValue = strValue;\n  }\n  isCharacter(code) {\n    assert.argumentTypes(code, int);\n    return assert.returnType(((this.type == TOKEN_TYPE_CHARACTER && this._numValue == code)), assert.type.boolean);\n  }\n  isNumber() {\n    return assert.returnType(((this.type == TOKEN_TYPE_NUMBER)), assert.type.boolean);\n  }\n  isString() {\n    return assert.returnType(((this.type == TOKEN_TYPE_STRING)), assert.type.boolean);\n  }\n  isOperator(operater) {\n    assert.argumentTypes(operater, assert.type.string);\n    return assert.returnType(((this.type == TOKEN_TYPE_OPERATOR && this._strValue == operater)), assert.type.boolean);\n  }\n  isIdentifier() {\n    return assert.returnType(((this.type == TOKEN_TYPE_IDENTIFIER)), assert.type.boolean);\n  }\n  isKeyword() {\n    return assert.returnType(((this.type == TOKEN_TYPE_KEYWORD)), assert.type.boolean);\n  }\n  isKeywordVar() {\n    return assert.returnType(((this.type == TOKEN_TYPE_KEYWORD && this._strValue == \"var\")), assert.type.boolean);\n  }\n  isKeywordNull() {\n    return assert.returnType(((this.type == TOKEN_TYPE_KEYWORD && this._strValue == \"null\")), assert.type.boolean);\n  }\n  isKeywordUndefined() {\n    return assert.returnType(((this.type == TOKEN_TYPE_KEYWORD && this._strValue == \"undefined\")), assert.type.boolean);\n  }\n  isKeywordTrue() {\n    return assert.returnType(((this.type == TOKEN_TYPE_KEYWORD && this._strValue == \"true\")), assert.type.boolean);\n  }\n  isKeywordFalse() {\n    return assert.returnType(((this.type == TOKEN_TYPE_KEYWORD && this._strValue == \"false\")), assert.type.boolean);\n  }\n  toNumber() {\n    return assert.returnType(((this.type == TOKEN_TYPE_NUMBER) ? this._numValue : -1), assert.type.number);\n  }\n  toString() {\n    var type = assert.type(this.type, int);\n    if (type >= TOKEN_TYPE_CHARACTER && type <= TOKEN_TYPE_STRING) {\n      return assert.returnType((this._strValue), assert.type.string);\n    } else if (type == TOKEN_TYPE_NUMBER) {\n      return assert.returnType((this._numValue.toString()), assert.type.string);\n    } else {\n      return assert.returnType((null), assert.type.string);\n    }\n  }\n}\nObject.defineProperty(Token, \"parameters\", {get: function() {\n    return [[int], [int], [assert.type.number], [assert.type.string]];\n  }});\nObject.defineProperty(Token.prototype.isCharacter, \"parameters\", {get: function() {\n    return [[int]];\n  }});\nObject.defineProperty(Token.prototype.isOperator, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nfunction newCharacterToken(index, code) {\n  assert.argumentTypes(index, int, code, int);\n  return assert.returnType((new Token(index, TOKEN_TYPE_CHARACTER, code, StringWrapper.fromCharCode(code))), Token);\n}\nObject.defineProperty(newCharacterToken, \"parameters\", {get: function() {\n    return [[int], [int]];\n  }});\nfunction newIdentifierToken(index, text) {\n  assert.argumentTypes(index, int, text, assert.type.string);\n  return assert.returnType((new Token(index, TOKEN_TYPE_IDENTIFIER, 0, text)), Token);\n}\nObject.defineProperty(newIdentifierToken, \"parameters\", {get: function() {\n    return [[int], [assert.type.string]];\n  }});\nfunction newKeywordToken(index, text) {\n  assert.argumentTypes(index, int, text, assert.type.string);\n  return assert.returnType((new Token(index, TOKEN_TYPE_KEYWORD, 0, text)), Token);\n}\nObject.defineProperty(newKeywordToken, \"parameters\", {get: function() {\n    return [[int], [assert.type.string]];\n  }});\nfunction newOperatorToken(index, text) {\n  assert.argumentTypes(index, int, text, assert.type.string);\n  return assert.returnType((new Token(index, TOKEN_TYPE_OPERATOR, 0, text)), Token);\n}\nObject.defineProperty(newOperatorToken, \"parameters\", {get: function() {\n    return [[int], [assert.type.string]];\n  }});\nfunction newStringToken(index, text) {\n  assert.argumentTypes(index, int, text, assert.type.string);\n  return assert.returnType((new Token(index, TOKEN_TYPE_STRING, 0, text)), Token);\n}\nObject.defineProperty(newStringToken, \"parameters\", {get: function() {\n    return [[int], [assert.type.string]];\n  }});\nfunction newNumberToken(index, n) {\n  assert.argumentTypes(index, int, n, assert.type.number);\n  return assert.returnType((new Token(index, TOKEN_TYPE_NUMBER, n, \"\")), Token);\n}\nObject.defineProperty(newNumberToken, \"parameters\", {get: function() {\n    return [[int], [assert.type.number]];\n  }});\nexport var EOF = assert.type(new Token(-1, 0, 0, \"\"), Token);\nexport const $EOF = 0;\nexport const $TAB = 9;\nexport const $LF = 10;\nexport const $VTAB = 11;\nexport const $FF = 12;\nexport const $CR = 13;\nexport const $SPACE = 32;\nexport const $BANG = 33;\nexport const $DQ = 34;\nexport const $HASH = 35;\nexport const $$ = 36;\nexport const $PERCENT = 37;\nexport const $AMPERSAND = 38;\nexport const $SQ = 39;\nexport const $LPAREN = 40;\nexport const $RPAREN = 41;\nexport const $STAR = 42;\nexport const $PLUS = 43;\nexport const $COMMA = 44;\nexport const $MINUS = 45;\nexport const $PERIOD = 46;\nexport const $SLASH = 47;\nexport const $COLON = 58;\nexport const $SEMICOLON = 59;\nexport const $LT = 60;\nexport const $EQ = 61;\nexport const $GT = 62;\nexport const $QUESTION = 63;\nconst $0 = 48;\nconst $9 = 57;\nconst $A = 65,\n    $B = 66,\n    $C = 67,\n    $D = 68,\n    $E = 69,\n    $F = 70,\n    $G = 71,\n    $H = 72,\n    $I = 73,\n    $J = 74,\n    $K = 75,\n    $L = 76,\n    $M = 77,\n    $N = 78,\n    $O = 79,\n    $P = 80,\n    $Q = 81,\n    $R = 82,\n    $S = 83,\n    $T = 84,\n    $U = 85,\n    $V = 86,\n    $W = 87,\n    $X = 88,\n    $Y = 89,\n    $Z = 90;\nexport const $LBRACKET = 91;\nexport const $BACKSLASH = 92;\nexport const $RBRACKET = 93;\nconst $CARET = 94;\nconst $_ = 95;\nconst $a = 97,\n    $b = 98,\n    $c = 99,\n    $d = 100,\n    $e = 101,\n    $f = 102,\n    $g = 103,\n    $h = 104,\n    $i = 105,\n    $j = 106,\n    $k = 107,\n    $l = 108,\n    $m = 109,\n    $n = 110,\n    $o = 111,\n    $p = 112,\n    $q = 113,\n    $r = 114,\n    $s = 115,\n    $t = 116,\n    $u = 117,\n    $v = 118,\n    $w = 119,\n    $x = 120,\n    $y = 121,\n    $z = 122;\nexport const $LBRACE = 123;\nexport const $BAR = 124;\nexport const $RBRACE = 125;\nconst $NBSP = 160;\nexport class ScannerError extends Error {\n  constructor(message) {\n    super();\n    this.message = message;\n  }\n  toString() {\n    return this.message;\n  }\n}\nclass _Scanner {\n  constructor(input) {\n    assert.argumentTypes(input, assert.type.string);\n    this.input = input;\n    this.length = input.length;\n    this.peek = 0;\n    this.index = -1;\n    this.advance();\n  }\n  advance() {\n    this.peek = ++this.index >= this.length ? $EOF : StringWrapper.charCodeAt(this.input, this.index);\n  }\n  scanToken() {\n    var input = this.input,\n        length = this.length,\n        peek = this.peek,\n        index = this.index;\n    while (peek <= $SPACE) {\n      if (++index >= length) {\n        peek = $EOF;\n        break;\n      } else {\n        peek = StringWrapper.charCodeAt(input, index);\n      }\n    }\n    this.peek = peek;\n    this.index = index;\n    if (index >= length) {\n      return assert.returnType((null), Token);\n    }\n    if (isIdentifierStart(peek))\n      return assert.returnType((this.scanIdentifier()), Token);\n    if (isDigit(peek))\n      return assert.returnType((this.scanNumber(index)), Token);\n    var start = assert.type(index, int);\n    switch (peek) {\n      case $PERIOD:\n        this.advance();\n        return assert.returnType((isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD)), Token);\n      case $LPAREN:\n      case $RPAREN:\n      case $LBRACE:\n      case $RBRACE:\n      case $LBRACKET:\n      case $RBRACKET:\n      case $COMMA:\n      case $COLON:\n      case $SEMICOLON:\n        return assert.returnType((this.scanCharacter(start, peek)), Token);\n      case $SQ:\n      case $DQ:\n        return assert.returnType((this.scanString()), Token);\n      case $HASH:\n        return assert.returnType((this.scanOperator(start, StringWrapper.fromCharCode(peek))), Token);\n      case $PLUS:\n      case $MINUS:\n      case $STAR:\n      case $SLASH:\n      case $PERCENT:\n      case $CARET:\n      case $QUESTION:\n        return assert.returnType((this.scanOperator(start, StringWrapper.fromCharCode(peek))), Token);\n      case $LT:\n      case $GT:\n      case $BANG:\n      case $EQ:\n        return assert.returnType((this.scanComplexOperator(start, $EQ, StringWrapper.fromCharCode(peek), '=')), Token);\n      case $AMPERSAND:\n        return assert.returnType((this.scanComplexOperator(start, $AMPERSAND, '&', '&')), Token);\n      case $BAR:\n        return assert.returnType((this.scanComplexOperator(start, $BAR, '|', '|')), Token);\n      case $NBSP:\n        while (isWhitespace(this.peek))\n          this.advance();\n        return assert.returnType((this.scanToken()), Token);\n    }\n    this.error(`Unexpected character [${StringWrapper.fromCharCode(peek)}]`, 0);\n    return assert.returnType((null), Token);\n  }\n  scanCharacter(start, code) {\n    assert.argumentTypes(start, int, code, int);\n    assert(this.peek == code);\n    this.advance();\n    return assert.returnType((newCharacterToken(start, code)), Token);\n  }\n  scanOperator(start, str) {\n    assert.argumentTypes(start, int, str, assert.type.string);\n    assert(this.peek == StringWrapper.charCodeAt(str, 0));\n    assert(SetWrapper.has(OPERATORS, str));\n    this.advance();\n    return assert.returnType((newOperatorToken(start, str)), Token);\n  }\n  scanComplexOperator(start, code, one, two) {\n    assert.argumentTypes(start, int, code, int, one, assert.type.string, two, assert.type.string);\n    assert(this.peek == StringWrapper.charCodeAt(one, 0));\n    this.advance();\n    var str = assert.type(one, assert.type.string);\n    while (this.peek == code) {\n      this.advance();\n      str += two;\n    }\n    assert(SetWrapper.has(OPERATORS, str));\n    return assert.returnType((newOperatorToken(start, str)), Token);\n  }\n  scanIdentifier() {\n    assert(isIdentifierStart(this.peek));\n    var start = assert.type(this.index, int);\n    this.advance();\n    while (isIdentifierPart(this.peek))\n      this.advance();\n    var str = assert.type(this.input.substring(start, this.index), assert.type.string);\n    if (SetWrapper.has(KEYWORDS, str)) {\n      return assert.returnType((newKeywordToken(start, str)), Token);\n    } else {\n      return assert.returnType((newIdentifierToken(start, str)), Token);\n    }\n  }\n  scanNumber(start) {\n    assert.argumentTypes(start, int);\n    assert(isDigit(this.peek));\n    var simple = assert.type((this.index === start), assert.type.boolean);\n    this.advance();\n    while (true) {\n      if (isDigit(this.peek)) {} else if (this.peek == $PERIOD) {\n        simple = false;\n      } else if (isExponentStart(this.peek)) {\n        this.advance();\n        if (isExponentSign(this.peek))\n          this.advance();\n        if (!isDigit(this.peek))\n          this.error('Invalid exponent', -1);\n        simple = false;\n      } else {\n        break;\n      }\n      this.advance();\n    }\n    var str = assert.type(this.input.substring(start, this.index), assert.type.string);\n    var value = assert.type(simple ? NumberWrapper.parseIntAutoRadix(str) : NumberWrapper.parseFloat(str), assert.type.number);\n    return assert.returnType((newNumberToken(start, value)), Token);\n  }\n  scanString() {\n    assert(this.peek == $SQ || this.peek == $DQ);\n    var start = assert.type(this.index, int);\n    var quote = assert.type(this.peek, int);\n    this.advance();\n    var buffer;\n    var marker = assert.type(this.index, int);\n    var input = assert.type(this.input, assert.type.string);\n    while (this.peek != quote) {\n      if (this.peek == $BACKSLASH) {\n        if (buffer == null)\n          buffer = new StringJoiner();\n        buffer.add(input.substring(marker, this.index));\n        this.advance();\n        var unescapedCode;\n        if (this.peek == $u) {\n          var hex = assert.type(input.substring(this.index + 1, this.index + 5), assert.type.string);\n          try {\n            unescapedCode = NumberWrapper.parseInt(hex, 16);\n          } catch (e) {\n            this.error(`Invalid unicode escape [\\\\u${hex}]`, 0);\n          }\n          for (var i = assert.type(0, int); i < 5; i++) {\n            this.advance();\n          }\n        } else {\n          unescapedCode = unescape(this.peek);\n          this.advance();\n        }\n        buffer.add(StringWrapper.fromCharCode(unescapedCode));\n        marker = this.index;\n      } else if (this.peek == $EOF) {\n        this.error('Unterminated quote', 0);\n      } else {\n        this.advance();\n      }\n    }\n    var last = assert.type(input.substring(marker, this.index), assert.type.string);\n    this.advance();\n    var unescaped = assert.type(last, assert.type.string);\n    if (buffer != null) {\n      buffer.add(last);\n      unescaped = buffer.toString();\n    }\n    return assert.returnType((newStringToken(start, unescaped)), Token);\n  }\n  error(message, offset) {\n    assert.argumentTypes(message, assert.type.string, offset, int);\n    var position = assert.type(this.index + offset, int);\n    throw new ScannerError(`Lexer Error: ${message} at column ${position} in expression [${this.input}]`);\n  }\n}\nObject.defineProperty(_Scanner, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nObject.defineProperty(_Scanner.prototype.scanCharacter, \"parameters\", {get: function() {\n    return [[int], [int]];\n  }});\nObject.defineProperty(_Scanner.prototype.scanOperator, \"parameters\", {get: function() {\n    return [[int], [assert.type.string]];\n  }});\nObject.defineProperty(_Scanner.prototype.scanComplexOperator, \"parameters\", {get: function() {\n    return [[int], [int], [assert.type.string], [assert.type.string]];\n  }});\nObject.defineProperty(_Scanner.prototype.scanNumber, \"parameters\", {get: function() {\n    return [[int]];\n  }});\nObject.defineProperty(_Scanner.prototype.error, \"parameters\", {get: function() {\n    return [[assert.type.string], [int]];\n  }});\nfunction isWhitespace(code) {\n  assert.argumentTypes(code, int);\n  return assert.returnType(((code >= $TAB && code <= $SPACE) || (code == $NBSP)), assert.type.boolean);\n}\nObject.defineProperty(isWhitespace, \"parameters\", {get: function() {\n    return [[int]];\n  }});\nfunction isIdentifierStart(code) {\n  assert.argumentTypes(code, int);\n  return assert.returnType((($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == $$)), assert.type.boolean);\n}\nObject.defineProperty(isIdentifierStart, \"parameters\", {get: function() {\n    return [[int]];\n  }});\nfunction isIdentifierPart(code) {\n  assert.argumentTypes(code, int);\n  return assert.returnType((($a <= code && code <= $z) || ($A <= code && code <= $Z) || ($0 <= code && code <= $9) || (code == $_) || (code == $$)), assert.type.boolean);\n}\nObject.defineProperty(isIdentifierPart, \"parameters\", {get: function() {\n    return [[int]];\n  }});\nfunction isDigit(code) {\n  assert.argumentTypes(code, int);\n  return assert.returnType(($0 <= code && code <= $9), assert.type.boolean);\n}\nObject.defineProperty(isDigit, \"parameters\", {get: function() {\n    return [[int]];\n  }});\nfunction isExponentStart(code) {\n  assert.argumentTypes(code, int);\n  return assert.returnType((code == $e || code == $E), assert.type.boolean);\n}\nObject.defineProperty(isExponentStart, \"parameters\", {get: function() {\n    return [[int]];\n  }});\nfunction isExponentSign(code) {\n  assert.argumentTypes(code, int);\n  return assert.returnType((code == $MINUS || code == $PLUS), assert.type.boolean);\n}\nObject.defineProperty(isExponentSign, \"parameters\", {get: function() {\n    return [[int]];\n  }});\nfunction unescape(code) {\n  assert.argumentTypes(code, int);\n  switch (code) {\n    case $n:\n      return assert.returnType(($LF), int);\n    case $f:\n      return assert.returnType(($FF), int);\n    case $r:\n      return assert.returnType(($CR), int);\n    case $t:\n      return assert.returnType(($TAB), int);\n    case $v:\n      return assert.returnType(($VTAB), int);\n    default:\n      return assert.returnType((code), int);\n  }\n}\nObject.defineProperty(unescape, \"parameters\", {get: function() {\n    return [[int]];\n  }});\nvar OPERATORS = SetWrapper.createFromList(['+', '-', '*', '/', '%', '^', '=', '==', '!=', '===', '!==', '<', '>', '<=', '>=', '&&', '||', '&', '|', '!', '?', '#']);\nvar KEYWORDS = SetWrapper.createFromList(['var', 'null', 'undefined', 'true', 'false']);\n//# sourceMappingURL=lexer.js.map\n\n//# sourceMappingURL=./lexer.map"]}