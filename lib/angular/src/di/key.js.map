{"version":3,"sources":["key.js"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,2FAAoB,UAAS,SAAQ;;;;;;;;AAApD,OAAO;AACD,UAAM,GADZ,SAAS,IAAG,CAAG;AAAf,aAAoB,KAAG,OAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,iBAAoB,KAAG,WAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,gBAAoB,KAAG,UAAkB,CAAC;IAElC,CADuB;AACzB,UAAM;AAFZ,YAAA,SAAQ,AAAC;AAGF,eAAM,IAAE,CACD,KAAI,CAAG,CAAA,EAAC,CAAG;AACrB,aAAG,MAAM,EAAI,MAAI,CAAC;AAClB,aAAG,GAAG,EAAI,GAAC,CAAC;QACd;AALQ,AAeV,aAfiB,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC,OAM5C,GAAI,YAAU,EAAI;AAChB,iBAAO,CAAA,SAAQ,AAAC,CAAC,IAAG,MAAM,CAAC,CAAC;UAC9B;AACO,YAAE,CAAT,UAAW,KAAI,CAAG;AAChB,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,kBAAiB,IAAI,AAAC,CAAC,KAAI,CAAC,CAAC,CAAG,IAAE,CAAC,CAAC;UAChE;AACA,YAAW,aAAW,EAAI;AACxB,iBAAO,CAAA,kBAAiB,aAAa,CAAC;UACxC;AAAA,SAb8D,CAAC;MACzD,AAAC,EAAC,CAJ0B,CAAA;AAApC,cAAQ,AAAC,YAAqC,CAAA;AAA9C,oBAAA,SAAQ,AAAC;AAkBF,eAAM,YAAU,CACV,AAAC,CAAE;AACZ,aAAG,SAAS,EAAI,CAAA,UAAS,OAAO,AAAC,EAAC,CAAC;QACrC;AAnBQ,AAiCV,aAjCiB,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;AAoB5C,YAAE,CAAF,UAAI,KAAI,CAAG;AACT,eAAI,KAAI,WAAa,IAAE;AACrB,mBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,KAAI,CAAC,CAAG,IAAE,CAAC,CAAC;AAAA,AACxC,eAAI,UAAS,SAAS,AAAC,CAAC,IAAG,SAAS,CAAG,MAAI,CAAC,CAAG;AAC7C,mBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,UAAS,IAAI,AAAC,CAAC,IAAG,SAAS,CAAG,MAAI,CAAC,CAAC,CAAG,IAAE,CAAC,CAAC;YACvE;AAAA,AACI,cAAA,CAAA,MAAK,EAAI,IAAI,IAAE,AAAC,CAAC,KAAI,CAAG,CAAA,GAAE,aAAa,CAAC,CAAC;AAC7C,qBAAS,IAAI,AAAC,CAAC,IAAG,SAAS,CAAG,MAAI,CAAG,OAAK,CAAC,CAAC;AAC5C,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,MAAK,CAAC,CAAG,IAAE,CAAC,CAAC;UACzC;AACA,YAAI,aAAW,EAAI;AACjB,iBAAO,CAAA,UAAS,KAAK,AAAC,CAAC,IAAG,SAAS,CAAC,CAAC;UACvC;AAAA,aA/B8D,CAAC;MACzD,AAAC,EAAC,CAJ0B,CAAA;AAApC,cAAQ,AAAC,4BAAqC,CAAA;yBAoCrB,IAAI,YAAU,AAAC,EAAC;IAlCV;EAC3B,CAAA;AADI,CAAC,CAAC;AAqCmB","file":"src/di/key.js","sourceRoot":"/Users/peteringram/Code/Angular2-Plate/node_modules/angular2/es6/dev/","sourcesContent":["import {assert} from \"rtts_assert/rtts_assert\";\nimport {MapWrapper} from 'angular2/src/facade/collection';\nimport {stringify} from 'angular2/src/facade/lang';\nexport class Key {\n  constructor(token, id) {\n    this.token = token;\n    this.id = id;\n  }\n  get displayName() {\n    return stringify(this.token);\n  }\n  static get(token) {\n    return assert.returnType((_globalKeyRegistry.get(token)), Key);\n  }\n  static get numberOfKeys() {\n    return _globalKeyRegistry.numberOfKeys;\n  }\n}\nexport class KeyRegistry {\n  constructor() {\n    this._allKeys = MapWrapper.create();\n  }\n  get(token) {\n    if (token instanceof Key)\n      return assert.returnType((token), Key);\n    if (MapWrapper.contains(this._allKeys, token)) {\n      return assert.returnType((MapWrapper.get(this._allKeys, token)), Key);\n    }\n    var newKey = new Key(token, Key.numberOfKeys);\n    MapWrapper.set(this._allKeys, token, newKey);\n    return assert.returnType((newKey), Key);\n  }\n  get numberOfKeys() {\n    return MapWrapper.size(this._allKeys);\n  }\n}\nvar _globalKeyRegistry = new KeyRegistry();\n//# sourceMappingURL=key.js.map\n\n//# sourceMappingURL=./key.map"]}