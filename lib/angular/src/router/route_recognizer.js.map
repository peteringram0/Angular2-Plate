{"version":3,"sources":["route_recognizer.js"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,gHAAoB,UAAS,SAAQ;;;;;;;;;;;;;;;AAApD,OAAO;AACD,UAAM,GADZ,SAAS,IAAG,CAAG;AAAf,aAAoB,KAAG,OAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,aAAoB,KAAG,OAAkB,CAAC;AAA1C,oBAAoB,KAAG,cAAkB,CAAC;AAA1C,oBAAoB,KAAG,cAAkB,CAAC;AAA1C,gBAAoB,KAAG,UAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,UAAoB,KAAG,IAAkB,CAAC;AAA1C,iBAAoB,KAAG,WAAkB,CAAC;AAA1C,WAAoB,KAAG,KAAkB,CAAC;AAA1C,kBAAoB,KAAG,YAAkB,CAAC;AAA1C,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,uBAAoB,KAAG,iBAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,qBAAoB,KAAG,eAAkB,CAAC;IAElC,CADuB;AACzB,UAAM;AAFZ,wBAAA,SAAQ,AAAC;AAYF,eAAM,gBAAc,CACd,AAAC,CAAE;AACZ,aAAG,MAAM,EAAI,CAAA,UAAS,OAAO,AAAC,EAAC,CAAC;AAChC,aAAG,SAAS,EAAI,CAAA,UAAS,OAAO,AAAC,EAAC,CAAC;AACnC,aAAG,UAAU,EAAI,CAAA,UAAS,OAAO,AAAC,EAAC,CAAC;QACtC;AAfQ,AA2DV,aA3DiB,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;AAgB5C,oBAAU,CAAV,UAAY,IAAG,CAAG,CAAA,MAAK,CAAG;AACxB,iBAAK,cAAc,AAAC,CAAC,IAAG,CAAG,CAAA,MAAK,KAAK,OAAO,CAAG,OAAK,CAAG,CAAA,MAAK,KAAK,OAAO,CAAC,CAAC;AAC1E,qBAAS,IAAI,AAAC,CAAC,IAAG,UAAU,CAAG,KAAG,CAAG,OAAK,CAAC,CAAC;UAC9C;AACA,kBAAQ,CAAR,UAAU,IAAG,CAAG,CAAA,OAAM,AAAc,CAAG;cAAd,MAAI,6CAAI,KAAG;AAClC,iBAAK,cAAc,AAAC,CAAC,IAAG,CAAG,CAAA,MAAK,KAAK,OAAO,CAAG,QAAM,CAAG,CAAA,MAAK,KAAK,IAAI,CAAG,MAAI,CAAG,CAAA,MAAK,KAAK,OAAO,CAAC,CAAC;AACnG,AAAI,cAAA,CAAA,UAAS,EAAI,IAAI,eAAa,AAAC,CAAC,IAAG,CAAG,QAAM,CAAC,CAAC;AAClD,qBAAS,IAAI,AAAC,CAAC,IAAG,SAAS,CAAG,CAAA,UAAS,MAAM,CAAG,WAAS,CAAC,CAAC;AAC3D,eAAI,SAAQ,AAAC,CAAC,KAAI,CAAC,CAAG;AACpB,uBAAS,IAAI,AAAC,CAAC,IAAG,MAAM,CAAG,MAAI,CAAG,WAAS,CAAC,CAAC;YAC/C;AAAA,UACF;AACA,kBAAQ,CAAR,UAAU,GAAE;AACV,iBAAK,cAAc,AAAC,CAAC,GAAE,CAAG,CAAA,MAAK,KAAK,OAAO,CAAC,CAAC;AAC7C,AAAI,cAAA,CAAA,SAAQ,EAAI,GAAC,CAAC;AAClB,qBAAS,QAAQ,AAAC,CAAC,IAAG,UAAU,GAAG,SAAC,MAAK,CAAG,CAAA,IAAG,CAAM;AACnD,iBAAI,aAAY,WAAW,AAAC,CAAC,GAAE,CAAG,KAAG,CAAC,CAAG;AACvC,kBAAE,EAAI,CAAA,MAAK,EAAI,CAAA,aAAY,UAAU,AAAC,CAAC,GAAE,CAAG,CAAA,IAAG,OAAO,CAAC,CAAC;cAC1D;AAAA,YACF,EAAC,CAAC;AACF,qBAAS,QAAQ,AAAC,CAAC,IAAG,SAAS,GAAG,SAAC,cAAa,CAAG,CAAA,KAAI,CAAM;AAC3D,AAAI,gBAAA,CAAA,KAAI,CAAC;AACT,iBAAI,SAAQ,AAAC,CAAC,KAAI,EAAI,CAAA,aAAY,WAAW,AAAC,CAAC,KAAI,CAAG,IAAE,CAAC,CAAC,CAAG;AAC3D,AAAI,kBAAA,CAAA,QAAO,EAAI,CAAA,gBAAe,OAAO,AAAC,EAAC,CAAC;AACxC,+BAAe,IAAI,AAAC,CAAC,QAAO,CAAG,UAAQ,CAAG,CAAA,cAAa,QAAQ,CAAC,CAAC;AACjE,+BAAe,IAAI,AAAC,CAAC,QAAO,CAAG,SAAO,CAAG,CAAA,cAAa,YAAY,AAAC,CAAC,GAAE,CAAC,CAAC,CAAC;AACzE,+BAAe,IAAI,AAAC,CAAC,QAAO,CAAG,aAAW,CAAG,CAAA,KAAI,CAAE,CAAA,CAAC,CAAC,CAAC;AACtD,AAAI,kBAAA,CAAA,YAAW,EAAI,CAAA,aAAY,UAAU,AAAC,CAAC,GAAE,CAAG,CAAA,KAAI,CAAE,CAAA,CAAC,OAAO,CAAC,CAAC;AAChE,+BAAe,IAAI,AAAC,CAAC,QAAO,CAAG,eAAa,CAAG,aAAW,CAAC,CAAC;AAC5D,0BAAU,KAAK,AAAC,CAAC,SAAQ,CAAG,SAAO,CAAC,CAAC;cACvC;AAAA,YACF,EAAC,CAAC;AACF,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,SAAQ,CAAC,CAAG,CAAA,MAAK,YAAY,AAAC,CAAC,IAAG,CAAG,UAAQ,CAAC,CAAC,CAAC;UAC5E;AACA,iBAAO,CAAP,UAAS,IAAG,CAAG;AACb,iBAAK,cAAc,AAAC,CAAC,IAAG,CAAG,CAAA,MAAK,KAAK,OAAO,CAAC,CAAC;AAC9C,iBAAO,CAAA,UAAS,SAAS,AAAC,CAAC,IAAG,MAAM,CAAG,KAAG,CAAC,CAAC;UAC9C;AACA,iBAAO,CAAP,UAAS,IAAG,CAAG,CAAA,MAAK,CAAG;AACrB,iBAAK,cAAc,AAAC,CAAC,IAAG,CAAG,CAAA,MAAK,KAAK,OAAO,CAAG,OAAK,CAAG,CAAA,MAAK,KAAK,IAAI,CAAC,CAAC;AACvE,AAAI,cAAA,CAAA,cAAa,EAAI,CAAA,UAAS,IAAI,AAAC,CAAC,IAAG,MAAM,CAAG,KAAG,CAAC,CAAC;AACrD,iBAAO,CAAA,cAAa,SAAS,AAAC,CAAC,MAAK,CAAC,CAAC;UACxC;AAAA,aAzD8D,CAAC;MACzD,AAAC,EAAC,CAJ0B,CAAA;AAApC,cAAQ,AAAC,oCAAqC,CAAA;AA8D9C,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,YAAY,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACxF,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAG,EAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,UAAU,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACtF,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAG,EAAC,MAAK,KAAK,IAAI,CAAC,CAAG,EAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,UAAU,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACtF,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,SAAS,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACrF,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,eAAc,UAAU,SAAS,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACrF,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAG,EAAC,MAAK,KAAK,IAAI,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IA1E0B;EAC3B,CAAA;AADI,CAAC,CAAC;AA6EgC","file":"src/router/route_recognizer.js","sourceRoot":"/Users/peteringram/Code/Angular2-Plate/node_modules/angular2/es6/dev/","sourcesContent":["import {assert} from \"rtts_assert/rtts_assert\";\nimport {RegExp,\n  RegExpWrapper,\n  StringWrapper,\n  isPresent} from 'angular2/src/facade/lang';\nimport {Map,\n  MapWrapper,\n  List,\n  ListWrapper,\n  StringMap,\n  StringMapWrapper} from 'angular2/src/facade/collection';\nimport {PathRecognizer} from './path_recognizer';\nexport class RouteRecognizer {\n  constructor() {\n    this.names = MapWrapper.create();\n    this.matchers = MapWrapper.create();\n    this.redirects = MapWrapper.create();\n  }\n  addRedirect(path, target) {\n    assert.argumentTypes(path, assert.type.string, target, assert.type.string);\n    MapWrapper.set(this.redirects, path, target);\n  }\n  addConfig(path, handler, alias = null) {\n    assert.argumentTypes(path, assert.type.string, handler, assert.type.any, alias, assert.type.string);\n    var recognizer = new PathRecognizer(path, handler);\n    MapWrapper.set(this.matchers, recognizer.regex, recognizer);\n    if (isPresent(alias)) {\n      MapWrapper.set(this.names, alias, recognizer);\n    }\n  }\n  recognize(url) {\n    assert.argumentTypes(url, assert.type.string);\n    var solutions = [];\n    MapWrapper.forEach(this.redirects, (target, path) => {\n      if (StringWrapper.startsWith(url, path)) {\n        url = target + StringWrapper.substring(url, path.length);\n      }\n    });\n    MapWrapper.forEach(this.matchers, (pathRecognizer, regex) => {\n      var match;\n      if (isPresent(match = RegExpWrapper.firstMatch(regex, url))) {\n        var solution = StringMapWrapper.create();\n        StringMapWrapper.set(solution, 'handler', pathRecognizer.handler);\n        StringMapWrapper.set(solution, 'params', pathRecognizer.parseParams(url));\n        StringMapWrapper.set(solution, 'matchedUrl', match[0]);\n        var unmatchedUrl = StringWrapper.substring(url, match[0].length);\n        StringMapWrapper.set(solution, 'unmatchedUrl', unmatchedUrl);\n        ListWrapper.push(solutions, solution);\n      }\n    });\n    return assert.returnType((solutions), assert.genericType(List, StringMap));\n  }\n  hasRoute(name) {\n    assert.argumentTypes(name, assert.type.string);\n    return MapWrapper.contains(this.names, name);\n  }\n  generate(name, params) {\n    assert.argumentTypes(name, assert.type.string, params, assert.type.any);\n    var pathRecognizer = MapWrapper.get(this.names, name);\n    return pathRecognizer.generate(params);\n  }\n}\nObject.defineProperty(RouteRecognizer.prototype.addRedirect, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nObject.defineProperty(RouteRecognizer.prototype.addConfig, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.any], [assert.type.string]];\n  }});\nObject.defineProperty(RouteRecognizer.prototype.recognize, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nObject.defineProperty(RouteRecognizer.prototype.hasRoute, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nObject.defineProperty(RouteRecognizer.prototype.generate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.any]];\n  }});\n//# sourceMappingURL=route_recognizer.js.map\n\n//# sourceMappingURL=./route_recognizer.map"]}